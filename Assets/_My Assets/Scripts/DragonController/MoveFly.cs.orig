using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MoveFly:MoveStateBase{

    bool b_airborne = true;
    float f_pitchAngle = 0f;
    float f_rollAngle = 0f;

    float f_energyCurrent;
    //float f_workDoneByForce;
    float f_flyVel;

    Vector3 v3_forwardVec;
    Vector3 v3_leftVec; // So every rotation doesn't have to be negative

    public MoveFly(MoveController parent) : base(parent) { }

    public override void FixedUpdate()
    {
        GroundCollisionForces();
        InputMovement();
        PitchRotation();
        RollRotation();

        // Damp things
        G.rigid.AddTorque(-G.rigid.angularVelocity * G.f_rotateDamping, ForceMode.Acceleration);
    }

    public override void CheckGroundCollision()
    {
        G.v3_currentVelocity = G.rigid.velocity;
        Vector3 currentPosition = MC.transform.position;
        int length = G.v3list_localTerrainDetectDown.Length;
        int invalid = -1;
        int validPointsFound = length;

        //will store info of successful ray cast
        RaycastHit hitInfo;

        //terrain should have mesh collider and be on custom terrain 
        //layer so we don't hit other objects with our raycast
        LayerMask layer = 1 << LayerMask.NameToLayer("Terrain");

        Vector3 worldterrainDetect;
        Vector3 worldterrainDir;
        // Raycast loop for terrain below
        for (int i = 0; i < length; i++)
        {
            worldterrainDetect = MC.transform.TransformPoint(G.v3list_localTerrainDetectDown[i]);
            worldterrainDir = G.rigid.velocity * .25f + -MC.transform.up * G.f_vertHeightCheck;
            if (Physics.SphereCast(worldterrainDetect, 0.2f, worldterrainDir, out hitInfo, worldterrainDir.magnitude, layer))
            {
                G.v3list_terrainPoint[i] = hitInfo.point;
                G.fList_terrainDistance[i] = Vector3.Magnitude(worldterrainDetect - G.v3list_terrainPoint[i]);
                Debug.DrawLine(worldterrainDetect, G.v3list_terrainPoint[i], Color.blue);
            }
            else
            {
                invalid = i;
                validPointsFound--;
                Debug.DrawLine(worldterrainDetect, worldterrainDetect + worldterrainDir, Color.red);
                G.v3list_terrainPoint[i] = worldterrainDetect + worldterrainDir;
                G.fList_terrainDistance[i] = G.f_vertHeightCheck;
            }
        }

        G.b_cliffCollide = false;

        // Raycast to check for cliffs ahead
        if (Physics.SphereCast(currentPosition, 0.3f, MC.transform.forward, out hitInfo, G.f_capsuleLength * 1.1f, layer))
        {
            Debug.DrawLine(currentPosition, hitInfo.point, Color.blue);
            // hit terrain
            G.v3_wallNormal = hitInfo.normal;
            G.b_cliffCollide = true; // collided with an actual cliff
        }
        else
        {
            Debug.DrawLine(currentPosition, currentPosition + MC.transform.forward * G.f_capsuleLength * 1.1f, Color.red);
        }


        Vector3 v1, v2;
        if (validPointsFound == 3) //We need the 3 points that don't suck
        {
            int index1 = (invalid + 1) % length; int index2 = (invalid + 2) % length; int index3 = (invalid + 3) % length;
            v1 = G.v3list_terrainPoint[index1] - G.v3list_terrainPoint[index2];
            v2 = G.v3list_terrainPoint[index1] - G.v3list_terrainPoint[index3];
        }
        else
        {
            /*G.v3_terrainNormAvg = Vector3.up;
            return;*/
            G.v3list_terrainPoint[2] = Vector3.Lerp(G.v3list_terrainPoint[2], G.v3list_terrainPoint[3], 0.5f);
            v1 = G.v3list_terrainPoint[0] - G.v3list_terrainPoint[1];
            v2 = G.v3list_terrainPoint[0] - G.v3list_terrainPoint[2];
        }

        G.v3_terrainNormAvg = Vector3.Normalize(Vector3.Cross(v2, v1));
        //And make sure its facing upward
        G.v3_terrainNormAvg *= Mathf.Sign(Vector3.Dot(G.v3_terrainNormAvg, Vector3.up));


        Debug.DrawLine(currentPosition, currentPosition + G.v3_terrainNormAvg * 3f);
    }

    public override void CheckStateChange()
    {
        if (G.b_cliffCollide && Vector3.Dot(G.rigid.velocity, G.v3_wallNormal) < -2f) // Moving toward the wall
        {
            if (Vector3.Angle(G.v3_wallNormal, Vector3.up) > G.f_cliffAngleThreshold)
                DoStateChange(MC.C_moveCliff);
            else
                DoStateChange(MC.C_moveGround);

            G.f_wingOpenAmount = 0f;
            return;
        }

        if (!b_airborne)
        {
            if (Vector3.Angle(G.v3_terrainNormAvg, Vector3.up) > G.f_groundAngleThreshold)
                DoStateChange(MC.C_moveCliff);
            else
                DoStateChange(MC.C_moveGround);

            G.f_wingOpenAmount = 0f;
        }
    }

    protected override void InputMovement()
    {
        // first we have to get the input pitch angle and see if it's below 

        Vector3 windResist = -G.rigid.velocity * G.f_windResistance;
        DoWorkByForce(windResist + G.v3_grav);

        f_flyVel = Mathf.Sqrt(2 * f_energyCurrent);

        //f_flyVel = Mathf.Min(f_flyVel, G.f_maxFlySpeed);
        v3_leftVec = Vector3.Normalize(Vector3.Cross(-Vector3.up, G.rigid.velocity));
        v3_forwardVec = Vector3.Normalize(Vector3.ProjectOnPlane(G.rigid.velocity, Vector3.up));
        float velocityAngle = Vector3.SignedAngle(v3_forwardVec, G.rigid.velocity, v3_leftVec);
        float currentVelocity = G.rigid.velocity.magnitude;

        G.rigid.velocity = rot * Vector3.Normalize(G.rigid.velocity) * f_flyVel;
        //f_pitchAngle = Mathf.Clamp(f_pitchAngle, -G.f_maxPitch, G.f_maxPitch);
        // Pitching
        //f_pitchAngle = G.f_tiltSpeed * G.v2_inputAxes.y * Time.fixedDeltaTime;
        f_pitchAngle = G.v2_inputAxes.y * G.f_maxPitch;

        // Rolling
        f_rollAngle = G.v2_inputAxes.x * G.f_maxRoll;

        //turning
        rot = Quaternion.AngleAxis(f_rollAngle * Time.fixedDeltaTime, Vector3.up);
        G.rigid.velocity = rot * G.rigid.velocity;
        //Quaternion rot = Quaternion.AngleAxis(f_rollAngle * Time.fixedDeltaTime, Vector3.up);
        //G.rigid.velocity = rot * G.rigid.velocity;

        // forces and energy
        // lift
        //Vector3 lift;
        if (f_pitchAngle > velocityAngle - 1f)
        {
            if (currentVelocity > G.f_minFlySpeed && f_pitchAngle < velocityAngle + 1f)
                G.f_wingOpenAmount = G.f_minFlySpeed / currentVelocity;
            else
                G.f_wingOpenAmount = 1f;
        }
        else
        {
            Vector3 partialGrav = Vector3.Lerp(G.v3_grav, Vector3.zero, f_flyVel / G.f_minFlySpeed);
            G.rigid.AddForce(partialGrav, ForceMode.Acceleration);
            //DoWorkByForce(-partialGrav);
        }

        // Wing flapping
        if (G.b_jumpButtonDown)
            FlapTheWings();

        Debug.Log("flying velocity: " + currentVelocity);
    }

    public void DoWorkByForce(Vector3 force)
    {
        float f_workDoneByForce = Vector3.Dot(force, G.rigid.velocity * Time.fixedDeltaTime);
        f_energyCurrent = Mathf.Max(0, f_energyCurrent + f_workDoneByForce);
    }

    public void FlapTheWings()
    {
        Vector3 flapForce = MC.transform.forward * G.f_wingFlapForceForward + MC.transform.up * G.f_wingFlapForceVectorUp;
        DoWorkByForce(flapForce);
        MC.StartCoroutine(WingFlap(flapForce, G.f_wingFlapDelayTime, G.f_wingFlapLifeTime));
    }

    IEnumerator WingFlap(Vector3 velChange, float delay, float lifeSpan)
    {
        float elapsedTime = 0f;
        float ratioPerFrame = 1f / lifeSpan;
        while (elapsedTime < delay)
        {
            yield return new WaitForFixedUpdate();
            elapsedTime += Time.fixedDeltaTime;
        }
        elapsedTime -= delay;
        while (elapsedTime < lifeSpan)
        {
            DoWorkByForce(velChange * ratioPerFrame);
            G.rigid.AddForce(velChange * ratioPerFrame, ForceMode.Acceleration);       

            yield return new WaitForFixedUpdate();
            elapsedTime += Time.fixedDeltaTime;
        }
    }

    protected void PitchRotation()
    {
        Vector3 myForward = MC.transform.forward;
        Quaternion rot = Quaternion.AngleAxis(f_pitchAngle, v3_leftVec);
        //G.v3list_rotateTo[0] = rot * v3_forwardVec;
        G.v3list_rotateTo[0] = G.rigid.velocity;

        Vector3 axis = Vector3.Cross(G.v3list_rotateTo[0], myForward);
        Debug.DrawLine(MC.transform.position, MC.transform.position + G.v3list_rotateTo[0] * 3f, Color.cyan);

        ApplyTorque(myForward, G.v3list_rotateTo[0], axis, G.f_verticalTorque);
    }

    protected void RollRotation()
    {       
        Vector3 myLeft = -MC.transform.right;
        G.v3list_rotateTo[1] = Quaternion.AngleAxis(-f_rollAngle, G.v3list_rotateTo[0]) * v3_leftVec;

        Vector3 axis = Vector3.Cross(G.v3list_rotateTo[1], myLeft);

        Debug.DrawLine(MC.transform.position, MC.transform.position + G.v3list_rotateTo[1] * 3f, Color.magenta);

        ApplyTorque(myLeft, G.v3list_rotateTo[1], axis, G.f_horizontalTorque);
    }

    protected override void GroundCollisionForces()
    {
        float avgDistance = MathHelpers.FindAverage(G.fList_terrainDistance);
        avgDistance -= G.f_desiredHeight;

        if (avgDistance < G.f_desiredHeight * G.f_airborneThreshold && Vector3.Dot(G.v3_terrainNormAvg, G.v3_currentVelocity) < 0)
        {
            b_airborne = false;
        }
    }

    protected override void SetupState()
    {
        FlapTheWings();
        f_energyCurrent = Vector3.SqrMagnitude(G.rigid.velocity);
        f_pitchAngle = 0f;
        f_rollAngle = 0f;
        b_airborne = true;
        //v3_forwardVec = Vector3.ProjectOnPlane(MC.transform.forward, Vector3.up);
    }
}
